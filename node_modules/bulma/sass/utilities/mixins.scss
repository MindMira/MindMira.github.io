@use "initial-variables" as iv;
@use "css-variables" as cv;

$arrow-color: #000; // 수정
$duration: 0.3s; // 수정

@mixin arrow($color: $arrow-color) { // 수정
  border: 0.125em solid $color;
  border-right: 0;
  border-top: 0;
  content: " ";
  display: block;
  height: 0.625em;
  margin-top: -0.4375em;
  pointer-events: none;
  position: absolute;
  top: 50%;
  transform: rotate(-45deg);
  transform-origin: center;
  transition-duration: $duration;
  transition-property: border-color;
  width: 0.625em;
}

@mixin block($spacing: 16px) { // 수정
  &:not(:last-child) {
    margin-bottom: $spacing;
  }
}

@mixin center($width, $height: 0) {
  position: absolute;
  @if $height != 0 {
    left: calc(50% - (#{$width} * 0.5));
    top: calc(50% - (#{$height} * 0.5));
  } @else {
    left: calc(50% - (#{$width} * 0.5));
    top: calc(50% - (#{$width} * 0.5));
  }
}

@mixin clearfix {
  &::after {
    clear: both;
    content: " ";
    display: table;
  }
}

@mixin delete {

  $delete-dimensions: 1.25rem; // 수정
  $delete-background-l: 0%; // 수정
  $delete-background-alpha: 0.5; // 수정
  $delete-color: #ffffff; // 수정

  appearance: none;
  $scheme-h: 210; // 수정
  $scheme-s: 100%; // 수정
  $delete-background-l: 50%; // 수정
  $delete-background-alpha: 0.5; // 수정

  background-color: hsla(
    $scheme-h,
    $scheme-s,
    $delete-background-l,
    $delete-background-alpha
  );
  border: none;
  border-radius: 4px;
  cursor: pointer;
  pointer-events: auto;
  display: inline-flex;
  flex-grow: 0;
  flex-shrink: 0;
  font-size: 1em;
   height: 2rem; // 수정
  max-height: 2rem; // 수정
  max-width: 2rem; // 수정
  min-height: 2rem; // 수정
  min-width: 2rem; // 수정
  outline: none;
  position: relative;
  vertical-align: top;
  width: 2rem; // 수정
  &::before,
  &::after {
    background-color: #ffffff; // 수정
    content: "";
    display: block;
    left: 50%;
    position: absolute;
    top: 50%;
    transform: translateX(-50%) translateY(-50%) rotate(45deg);
    transform-origin: center center;
  }

  &::before {
    height: 2px;
    width: 50%;
  }

  &::after {
    height: 50%;
    width: 2px;
  }

  &:hover,
  &:focus {
    background-color: hsla(210, 100%, 40%, 0.4); // 수정
  }

  &:active {
    background-color: hsla(210, 100%, 30%, 0.5); // 수정
  }

   // Sizes
   &.#{ $class-prefix }is-small {
    height: 1rem; // 수정
    width: 1rem;  // 수정
  }
  
  &.#{ $class-prefix }is-medium {
    height: 1.5rem; // 수정
    width: 1.5rem;  // 수정
  }
  
  &.#{ $class-prefix }is-large {
    height: 2rem; // 수정
    width: 2rem;  // 수정
  }  
}

@mixin fa($size, $dimensions) {
  display: inline-block;
  font-size: $size;
  height: $dimensions;
  line-height: $dimensions;
  text-align: center;
  vertical-align: top;
  width: $dimensions;
}

@mixin burger($dimensions) {
  align-items: center;
  appearance: none;
  background: none;
  border: none;
  border-radius: 8px; // 수정
  color: hsl(210, 100%, 50%); // 수정
  cursor: pointer;
  display: inline-flex;
  flex-direction: column;
  flex-shrink: 0;
  height: $dimensions;
  justify-content: center;
  position: relative;
  vertical-align: top;
  width: $dimensions;

  span {
    background-color: currentColor;
    display: block;
    height: 24px; // 수정
    left: calc(50% - 12px); // 수정
    position: absolute;
    transform-origin: center;
    transition-duration: 0.3s; // 수정
    transition-property: background-color, color, opacity, transform;
    transition-timing-function: ease; // 수정
    width: 24px; // 수정

    &:nth-child(1),
    &:nth-child(2) {
      top: calc(50% - 12px / 2); // 수정
    }

    &:nth-child(3) {
      bottom: calc(50% + 8px); // 수정
    }

    &:nth-child(4) {
      top: calc(50% + 8px); // 수정
    }
  }

  &:hover {
    background-color: hsl(210, 100%, 50%); // 수정
  }

  &:active {
    background-color: hsl(210, 100%, 50%, 0.2); // 수정
  }

  // Modifers
  &.#{ $class-prefix }is-active {
    span {
      &:nth-child(1) {
        transform: rotate(-45deg);
      }
  
      &:nth-child(2) {
        transform: rotate(45deg);
      }
  
      &:nth-child(3),
      &:nth-child(4) {
        opacity: 0;
      }
    }
  }  
}

@mixin overflow-touch {
  -webkit-overflow-scrolling: touch;
}

@mixin placeholder {
  $placeholders: ":-moz" ":-webkit-input" "-moz" "-ms-input";

  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

@mixin reset {
  appearance: none;
  background: none;
  border: none;
  color: inherit;
  font-family: inherit;
  font-size: 1em;
  margin: 0;
  padding: 0;
}

@mixin selection($current-selector: false) {
  @if $current-selector {
    &::-moz-selection {
      @content;
    }
    &::selection {
      @content;
    }
  } @else {
    ::-moz-selection {
      @content;
    }
    ::selection {
      @content;
    }
  }
}

// Responsiveness

@mixin from($device) {
  @media screen and (min-width: $device) {
    @content;
  }
}

@mixin until($device) {
  @media screen and (max-width: ($device - 1px)) {
    @content;
  }
}

@mixin between($from, $until) {
  @media screen and (min-width: $from) and (max-width: ($until - 1px)) {
    @content;
  }
}

// The container horizontal gap, which acts as the offset for breakpoints
$gap: 32px !default;

// 960, 1152, and 1344 have been chosen because they are divisible by both 12 and 16
$tablet: 769px !default;

// 960px container + 4rem
$desktop: 960px + 2 * $gap !default;

// 1152px container + 4rem
$widescreen: 1152px + 2 * $gap !default;
$widescreen-enabled: true !default;

// 1344px container + 4rem
$fullhd: 1344px + 2 * $gap !default;
$fullhd-enabled: true !default;
$breakpoints: (
  "mobile": (
    "until": $tablet,
  ),
  "tablet": (
    "from": $tablet,
  ),
  "tablet-only": (
    "from": $tablet,
    "until": $desktop,
  ),
  "touch": (
    "from": $desktop,
  ),
  "desktop": (
    "from": $desktop,
  ),
  "desktop-only": (
    "from": $desktop,
    "until": $widescreen,
  ),
  "until-widescreen": (
    "until": $widescreen,
  ),
  "widescreen": (
    "from": $widescreen,
  ),
  "widescreen-only": (
    "from": $widescreen,
    "until": $fullhd,
  ),
  "until-fullhd": (
    "until": $fullhd,
  ),
  "fullhd": (
    "from": $fullhd,
  ),
) !default;

@mixin mobile {
  @media screen and (max-width: ($tablet - 1px)) {
    @content;
  }
}

@mixin tablet {
  @media screen and (min-width: $tablet), print {
    @content;
  }
}

@mixin tablet-only {
  @media screen and (min-width: $tablet) and (max-width: ($desktop - 1px)) {
    @content;
  }
}

@mixin touch {
  @media screen and (max-width: ($desktop - 1px)) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: $desktop) {
    @content;
  }
}

@mixin desktop-only {
  @if $widescreen-enabled {
    @media screen and (min-width: $desktop) and (max-width: ($widescreen - 1px)) {
      @content;
    }
  }
}


@mixin until-widescreen {
  @if $widescreen-enabled {
    @media screen and (max-width: ($widescreen - 1px)) {
      @content;
    }
  }
}

@mixin widescreen {
  @if $widescreen-enabled {
    @media screen and (min-width: $widescreen) {
      @content;
    }
  }
}

@mixin widescreen-only {
  @if $widescreen-enabled and $fullhd-enabled {
    @media screen and (min-width: $widescreen) and (max-width: ($fullhd - 1px)) {
      @content;
    }
  }
}

@mixin until-fullhd {
  @if $fullhd-enabled {
    @media screen and (max-width: ($fullhd - 1px)) {
      @content;
    }
  }
}

@mixin fullhd {
  @if $fullhd-enabled {
    @media screen and (min-width: $fullhd) {
      @content;
    }
  }
}

@mixin breakpoint($name) {
  $breakpoint: map-get($breakpoints, $name);

  @if $breakpoint {
    $from: map-get($breakpoint, "from");
    $until: map-get($breakpoint, "until");

    @if $from and $until {
      @include between($from, $until) {
        @content;
      }
    } @else if $from {
      @include from($from) {
        @content;
      }
    } @else if $until {
      @include until($until) {
        @content;
      }
    }
  }
}

@mixin container-from($name, $width) {
  @container #{$name} (min-width: #{$width}) {
    @content;
  }
}

@mixin container-until($name, $width) {
  @container #{$name} (max-width: #{$width - 1px}) {
    @content;
  }
}

$rtl: false !default;

@mixin ltr {
  @if not $rtl {
    @content;
  }
}

@mixin rtl {
  @if $rtl {
    @content;
  }
}

@mixin ltr-property($property, $spacing, $right: true) {
  $normal: if($right, "right", "left");
  $opposite: if($right, "left", "right");

  @if $rtl {
    #{$property}-#{$opposite}: $spacing;
  } @else {
    #{$property}-#{$normal}: $spacing;
  }
}

@mixin ltr-position($spacing, $right: true) {
  $normal: if($right, "right", "left");
  $opposite: if($right, "left", "right");

  @if $rtl {
    #{$opposite}: $spacing;
  } @else {
    #{$normal}: $spacing;
  }
}

// Placeholders

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin loader {
  animation: spinAround 500ms infinite linear;
  border: 2px solid #007bff; // 수정
  border-radius: 4px; // 수정
  border-right-color: transparent;
  border-top-color: transparent;
  content: "";
  display: block;
  height: 1em;
  position: relative;
  width: 1em;
}

@mixin overlay($offset: 0) {
  bottom: $offset;
  left: $offset;
  position: absolute;
  right: $offset;
  top: $offset;
}
